%%%%% ï»¿Automated approach for source location in shallow waters
%%%%% Angele Niclas
%%%%% 2023


clear; close all;
addpath(genpath('./subroutines'))
load combustive_sound_source.mat
% s_t: propagated modes generated by the impulsive source gunshot
% fs: sampling frequency
% mode_tapp: filtering of modes already done 



%% Filtering of modes 
%time vector
N=length(s_t);
time=(0:N-1)/fs;
%FFT parameters
NFFT=2048;
freq=(0:NFFT-1)*fs/NFFT;
%filtering of each mode (the detailed function can be found below).
%mode_t_app countains in each column the approximation of the modal
%components

%%%%comment this line to avoid doing the filtering
mode_t_app=filtering(s_t,time,fs,NFFT,16);

%% Computation of the dispersion curves
%value of sigma
sig=70; 
%length of the associated slicing window
NW=unique(2*floor((5*fs./sig+1)/2)+1); 

%spectrogram of mode 1
spectro_1=abs(tfrstft(mode_tapp(:,1),1:N,NFFT,gausswin(NW))).^2;
%diversion curves tm_1 and associated frequencies freq_1
[freq_1,tm_1]=meth_max(spectro_1,NFFT,time,fs);
%amplitude of each frequency 
amp_1=max(spectro_1(1:NFFT/2-1,:).');
%same procedure for modes 2,3,4
spectro_2=abs(tfrstft(mode_tapp(:,2),1:N,NFFT,gausswin(NW))).^2;
[freq_2,tm_2]=meth_max(spectro_2,NFFT,time,fs);
amp_2=max(spectro_2(1:NFFT/2-1,:).');
spectro_3=abs(tfrstft(mode_tapp(:,3),1:N,NFFT,gausswin(NW))).^2;
[freq_3,tm_3]=meth_max(spectro_3,NFFT,time,fs);
amp_3=max(spectro_3(1:NFFT/2-1,:).');
spectro_4=abs(tfrstft(mode_tapp(:,4),1:N,NFFT,gausswin(NW))).^2;
[freq_4,tm_4]=meth_max(spectro_4,NFFT,time,fs);
amp_4=max(spectro_4(1:NFFT/2-1,:).');
spectro_5=abs(tfrstft(mode_tapp(:,5),1:N,NFFT,gausswin(NW))).^2;
[freq_5,tm_5]=meth_max(spectro_5,NFFT,time,fs);
amp_5=max(spectro_5(1:NFFT/2-1,:).');
spectro_6=abs(tfrstft(mode_tapp(:,6),1:N,NFFT,gausswin(NW))).^2;
[freq_6,tm_6]=meth_max(spectro_6,NFFT,time,fs);
amp_6=max(spectro_6(1:NFFT/2-1,:).');
spectro_7=abs(tfrstft(mode_tapp(:,7),1:N,NFFT,gausswin(NW))).^2;
[freq_7,tm_7]=meth_max(spectro_7,NFFT,time,fs);
amp_7=max(spectro_7(1:NFFT/2-1,:).');
spectro_8=abs(tfrstft(mode_tapp(:,8),1:N,NFFT,gausswin(NW))).^2;
[freq_8,tm_8]=meth_max(spectro_8,NFFT,time,fs);
amp_8=max(spectro_8(1:NFFT/2-1,:).');
spectro_9=abs(tfrstft(mode_tapp(:,9),1:N,NFFT,gausswin(NW))).^2;
[freq_9,tm_9]=meth_max(spectro_9,NFFT,time,fs);
amp_9=max(spectro_9(1:NFFT/2-1,:).');
%we keep only frequencies between 100 and 300
amp_1=amp_1.*(freq_1>100).*(freq_1<300); 
amp_2=amp_2.*(freq_1>100).*(freq_1<300); 
amp_3=amp_3.*(freq_1>100).*(freq_1<300); 
amp_4=amp_4.*(freq_1>100).*(freq_1<300); 
amp_5=amp_5.*(freq_1>100).*(freq_1<300); 
amp_6=amp_6.*(freq_1>100).*(freq_1<300); 
amp_7=amp_7.*(freq_1>100).*(freq_1<300); 
amp_8=amp_8.*(freq_1>100).*(freq_1<300); 
amp_9=amp_9.*(freq_1>100).*(freq_1<300); 
M=max([amp_1,amp_2,amp_3,amp_4,amp_5,amp_6,amp_7,amp_8,amp_9]);


%vector containing all the dispersion curves 
T=[tm_1,tm_2, tm_3, tm_4,tm_5,tm_6,tm_7,tm_8,tm_9].';
%computation of max(S)
%threshold 
p=0.4; 
%vector containing 1 if we keep the part of the curve and 0 otherwise
AMP=[1.*(amp_1>M*p);1.*(amp_2>M*p);1.*(amp_3>M*p);1.*(amp_4>M*p);1.*(amp_5>M*p);1.*(amp_6>M*p);1.*(amp_7>M*p);1.*(amp_8>M*p);1.*(amp_9>M*p)]; 

%%% plot %%%
figure
hold on 
for i=1:9
    plot(AMP(i,:).*T(i,:),freq_1,'bo')
end
xlim([0.05,0.4])
ylim([100 300])
xlabel('Times (s)')
ylabel('Frequency (Hz)')
title('Values of tnapp and estimated dispersion curves')
pause(.1)
%%% end plot %%%

%% Minization of the penalized problem
%initial condition
x0=[5000,1464.5,1700,1000,1600,69.5,3]; 
%functional J, detailed below
g=@(x) J(x(1),x(2),x(3),x(4),x(5),x(6),x(7),freq_1,T,AMP); 
%penalization
alpha=g(x0); 
g=@(x) g(x)+(norm((x(6)-69.5)/69.5)^2+10*norm((1464.5-x(2))/1464.5)^2+10*norm((x(4)-1000)/1000)^2+norm((x(5)-1600)/1600)^2)*0.0000001+10*((x(1)<3000)+(x(1)>6000))+10*((x(3)<1470)+(x(3)>2000))+10*((x(7)>4)+(x(7)<2)); 
%minization 
options = optimset('Display','none'); 
x=fminsearch(g,x0,options); 

fprintf('rapp=%dm\n c1app=%dm/s\n c2app=%dm/s\n rho1app=%dkg/m3\n rho2app=%dkg/m3\n Dapp=%dm\n dtapp=%ds\n',x(1),x(2),x(3),x(4),x(5),x(6),x(7))


%%% plot %%%
vg=pek_vgb(freq,1,9,x(2),x(3),x(4),x(5),x(6)); 
plot(x(1)./vg-x(7), freq,'r')
legend('tnapp','','','','','','','','','','approx. disp. curves')
%%% end plot %%%


%% Detailed filtering function 
function mode_t_app=filtering(s_t,time,fs,NFFT,nbmode)
    %list to contain all the extracted modal components
    mode_t_app=[]; 
    %cut the signal so keep only the significative part
    ind1=1; 
    ind2=length(s_t);
    m=max(abs(s_t));
    while s_t(ind1)<0.01*m
        ind1=ind1+1; 
    end
    while s_t(ind2)<0.01*m
        ind2=ind2-1; 
    end
    %copy of the received signal
    str=s_t; 
    %restriction to the top frequencies 
    fmax=1000; 
    for nb=1:nbmode-1
        %list with all the quality factors
        Q=[];
        %list of positions in time to test t0
        L=30:70;
        %test to find the best t0
        for i=1:length(L)
            ind0=L(i); 
            %signal cut after t0
            stbb=str(ind0:ind2);
            %warping associated to t0
            [s_w, ~]=warp_temp_exa(stbb,fs,6.66+time(ind0),1);
            %warped spectrogram using a small value of sigma
            spectro_w=abs(tfrstft(s_w,1:length(s_w),NFFT,gausswin(501))).^2;
            fint=min(freq_max_usefull(spectro_w(1:1000,:)),fmax);
            [Qt0,~]=separation_warp(spectro_w(max(fint-120,1):fint+30,:));
            Q=[Q,Qt0];
        end
        %selection of the best t0 maximising the quality factor
        [~,temp]=max(Q); 
        ind0=L(temp);
        %warping of the signal using this t0
        stbb=str(ind0:ind2);
        N_ok=length(stbb); 
        [s_w, fs_w]=warp_temp_exa(stbb,fs,6.66+time(ind0),1);
        %computation of the spectrogram using a small value of sigma
        wind=gausswin(501);
        wind=wind/norm(wind);
        tfr_w=tfrstft(s_w,1:length(s_w),NFFT,wind); 
        spectro_w=abs(tfr_w).^2;
        fmax=min(freq_max_usefull(spectro_w(1:1000,:)),fmax); 
        %creation of the mask (see details below)
        [~,masquep]=separation_warp(spectro_w(max(fmax-120,1):fmax+30,:));
        %completion with zeros
        masque=[zeros(max(fmax-120,1)-1,length(s_w));masquep;zeros(NFFT-fmax-30,length(s_w))];
        %masked spectrogram
        mode_rtf_warp=masque.*tfr_w;
        %inverse spectrogram
        [mode_temp_warp]=real(sum(mode_rtf_warp,1))/NFFT/max(wind)*2;
        %inverse warping
        stib=iwarp_temp_exa(mode_temp_warp,fs_w,6.66+time(ind0),1,fs,N_ok);
        %completion with zeros
        stiapp=[zeros(ind0-1,1);stib;zeros(length(s_t)-ind2,1)];
        %add to mode_t_app the new mode
        mode_t_app=[mode_t_app,stiapp]; 
        %remove it from the signal 
        str=str-stiapp; 
        %%%%%%%%%%%%
        %%% plot %%% (comment to avoid the plot)
        %%%%%%%%%%%%
        figure 
        sgtitle(sprintf('Extraction of mode %d', nbmode+1-nb))
        subplot 131
        %first plot: warped spectrogram and bassins
        spectro=smooth2a(spectro_w(max(fmax-120,1):fmax+30,:),4,2);
        I=spectro/max(max(spectro)); 
        I=1-I.*(I>=0.05); 
        WS=watershed(I); 
        N=double(max(max(WS)));
        Ymax=0*(1:N); 
        Xmax=0*(1:N); 
        for i=1:N
            S=spectro.*(WS==i); 
            [~,b]=max(S,[],'all');
            [i1,i2]= ind2sub(size(S),b); 
            Ymax(i)=i1; 
            Xmax(i)=i2; 
        end
        [Ymax,ind]=sort(Ymax,'descend');
        Xmax=Xmax(ind); 
        time_w=0:1/fs_w:(length(s_w)-1)/fs_w;
        freq_w=0:fs_w/NFFT:fs_w-fs_w/NFFT; 
%         ylimM=min(freq_w(Ymax(1))+10,freq_w(350)); 
%         xlimM=time_w(max(Xmax))+0.6; 
        imagesc(time_w,freq_w(max(fmax-120,1):fmax+30),spectro.*(WS>=1)+max(max(spectro)).*(WS==0))
        hold on 
        plot(time_w(Xmax),freq_w(max(fmax-120,1)+Ymax),'r.','MarkerSize',14)
        axis xy 
%         ylim([0,ylimM])
%         xlim([0,xlimM])
        xlabel('Times (s)')
        ylabel('Frequency (Hz)')
        title('Warped spectrogram and bassins')
        %second plot: selected bassins
        subplot 132
        imagesc(time_w,freq_w(max(fmax-120,1):fmax+30),spectro.*masquep)
        axis xy 
%         ylim([0,ylimM])
%         xlim([0,xlimM])
        xlabel('Times (s)')
        ylabel('Frequency (Hz)')
        title('Masked warped spectrogram')
        %third plot: spectrogram of the modal component 
        subplot 133
        spectro=abs(tfrstft(stiapp.',1:length(time),NFFT,gausswin(51))).^2;
        freq=(0:NFFT-1)*fs/NFFT;
        imagesc(time, freq, spectro)
        axis xy
        ylim([0 fs/2])
        xlabel('Times (s)')
        ylabel('Frequency (Hz)')
        title('Unwarped spectrogram')
        pause(.1)
        %%%%%%%%%%%%
        %%% end plot %%% 
        %%%%%%%%%%%%
    end
    %the rest of the signal is associated to the last mode
    stiapp=str; 
    %%%%%%%%%%%%
    %%% plot %%% (comment to avoid the plot)
    %%%%%%%%%%%%
    figure
    sgtitle('Extraction of mode 1')
    spectro=abs(tfrstft(stiapp.',1:length(time),NFFT,gausswin(51))).^2;
    freq=(0:NFFT-1)*fs/NFFT;
    imagesc(time, freq, spectro)
    axis xy
    ylim([0 fs/2])
    xlabel('Times (s)')
    ylabel('Frequency (Hz)')
    title('Remaining spectrogram')
    pause(.1)
    %%%%%%%%%%%%
    %%% end plot %%% 
    %%%%%%%%%%%%
    mode_t_app=[mode_t_app,stiapp]; 
    mode_t_app=mode_t_app(:,nbmode:-1:1);
end

function [Q,Mask]=separation_warp(spectro)
    %smooth the spectrogram to find the drainage bassins
    spectro=smooth2a(spectro,4,2);
    %convert the spectrogram into a black and white picture
    I=spectro/max(max(spectro)); 
    %remove near zero parts
    I=1-I.*(I>=0.05); 
    %do a watershed transform
    WS=watershed(I); 
    %number of drainage bassins
    N=double(max(max(WS)));
    %list of local max
    Lmax=0*(1:N); 
    %list of their positions
    Ymax=0*(1:N); 
    Xmax=0*(1:N); 
    %completion of the three lists
    for i=1:N
        S=spectro.*(WS==i); 
        [a,b]=max(S,[],'all');
        Lmax(i)=a; 
        [i1,i2]= ind2sub(size(S),b); 
        Ymax(i)=i1; 
        Xmax(i)=i2; 
    end
    %sort bassins by descengin frequencies 
    [Ymax,ind]=sort(Ymax,'descend');
    Xmax=Xmax(ind); 
    Lmax=Lmax(ind);
    %computation of the mask
    i=2;
    Mask=spectro*0; 
    Mask=Mask+(WS==ind(1)); 
    %add the following bassin if their loc max is smaller
    while Ymax(i-1)-Ymax(i)<7 && i<7 && i<length(Ymax)
        Mask=Mask+(WS==ind(i)); 
        i=i+1;
    end
    %computation of the quality factor Q
    if i>6
        Q=0;
    else
        Q=abs(Ymax(i)-Ymax(1))+max(sum(Mask.'))/80; 
    end
end

function f=freq_max_usefull(spectro)
%select the maximum usefull frequency in the spectrogram (to cut it after)
    spectro=smooth2a(spectro,4,2);
    I=spectro/max(max(spectro)); 
    I=1-I.*(I>=0.01); 
    WS=watershed(I); 
    N=double(max(max(WS)));
    Lmax=0*(1:N); 
    Ymax=0*(1:N); 
    Xmax=0*(1:N); 
    for i=1:N
        S=spectro.*(WS==i); 
        [a,b]=max(S,[],'all');
        Lmax(i)=a; 
        [i1,i2]= ind2sub(size(S),b); 
        Ymax(i)=i1; 
        Xmax(i)=i2; 
    end
    [~,b]=max(Ymax);
    f=Ymax(b); 
end


function [freq,tm]=meth_max(spectro,NFFT,time,fs)
    %set of computed frequencies 
    freq=(0:NFFT-1)*fs/NFFT;
    %list of associated max
    E=spectro(:,1)*0; 
    %list of the position of the local max
    tm=E*0; 
    for i=1:length(E)
        [e,a]=max(spectro(i,:)); 
        E(i)=e; 
        tm(i)=time(a); 
    end
    %we cut the symmetric par in freq and tm 
    freq=freq(1:NFFT/2-1); 
    tm=tm(1:NFFT/2-1); 
end

function x=J(r,c1,c2,rho1,rho2,D,dt,freq,T,AMP) 
    %theoretical dispersion curves
    temp=(r./pek_vgb(freq,1,9,c1,c2,rho1,rho2,D)); 
    s=0; 
    x=0; 
    %remove all points with Nan values 
    temp(isnan(temp))=0; 
    for i=1:9
        x=x+norm(rmmissing(AMP(i,:).*(T(i,:)+dt-temp(i,:)))).^2; 
        s=s+length(rmmissing(temp(i,:))); 
    end
    x=x/s; 
end
