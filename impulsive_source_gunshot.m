%%%%% ï»¿Automated approach for source location in shallow waters
%%%%% Angele Niclas
%%%%% 2023


clear; close all;
addpath(genpath('./subroutines'))
load impulsive_source_gunshot.mat
% s_t: propagated modes generated by the impulsive source gunshot
% fs: sampling frequency

%% Filtering of modes 
%time vector
N=length(s_t);
time=(0:N-1)/fs;
%FFT parameters
NFFT=2048;
freq=(0:NFFT-1)*fs/NFFT;
%filtering of each mode (the detailed function can be found below).
%mode_t_app countains in each column the approximation of the modal
%components
mode_t_app=filtering(s_t,time,fs,NFFT,4);


%% Computation of the dispersion curves
%value of sigma
sig=5*fs/100; 
%length of the associated slicing window
NW=unique(2*floor((5*fs./sig+1)/2)+1); 

%spectrogram of mode 1
spectro_1=abs(tfrstft(mode_t_app(:,1),1:N,NFFT,gausswin(NW))).^2;
%we remove the noised frequencies 
spectro_1(1:200,:)=0; 
spectro_1(end-200:end,:)=0;
%diversion curves tm_1 and associated frequencies freq_1
[freq_1,tm_1]=meth_max(spectro_1,NFFT,time,fs);
%amplitude of each frequency 
amp_1=max(spectro_1(1:NFFT/2-1,:).');
%same procedure for modes 2,3,4
spectro_2=abs(tfrstft(mode_t_app(:,2),1:N,NFFT,gausswin(NW))).^2;
spectro_2(1:200,:)=0; 
spectro_2(end-200:end,:)=0;
[freq_2,tm_2]=meth_max(spectro_2,NFFT,time,fs);
amp_2=max(spectro_2(1:NFFT/2-1,:).');
spectro_3=abs(tfrstft(mode_t_app(:,3),1:N,NFFT,gausswin(NW))).^2;
spectro_3(1:200,:)=0; 
spectro_3(end-200:end,:)=0;
[freq_3,tm_3]=meth_max(spectro_3,NFFT,time,fs);
amp_3=max(spectro_3(1:NFFT/2-1,:).');
spectro_4=abs(tfrstft(mode_t_app(:,4),1:N,NFFT,gausswin(NW))).^2;
spectro_4(1:200,:)=0; 
spectro_4(end-200:end,:)=0;
[freq_4,tm_4]=meth_max(spectro_4,NFFT,time,fs);
amp_4=max(spectro_4(1:NFFT/2-1,:).');

%vector containing all the dispersion curves 
T=[tm_1,tm_2, tm_3, tm_4].';
%computation of max(S)
M=max([amp_1,amp_2,amp_3,amp_4]);
%threshold 
p=0.4; 
%vector containing 1 if we keep the part of the curve and 0 otherwise
AMP=[1.*(amp_1>M*p);1.*(amp_2>M*p);1.*(amp_3>M*p);1.*(amp_4>M*p)]; 

%% Minization of the penalized problem
%initial condition
x0=[8700,1450,1700,1000,1600,51,5.8]; 
%functional J, detailed below
g=@(x) J(x(1),x(2),x(3),x(4),x(5),x(6),x(7),freq_1,T,AMP); 
%penalization
alpha=g(x0); 
g=@(x) g(x)+(norm((x(6)-51)/51)^2+10*norm((1450-x(2))/1450)^2+10*norm((x(4)-1000)/1000)^2+norm((x(5)-1600)/1600)^2)+10*((x(1)<2000)+(x(1)>16000))+10*((x(3)<1550)+(x(3)>2000))+10*((x(7)>7)+(x(7)<5))*0.0001;  
%minization 
options = optimset('Display','none'); 
x=fminsearch(g,x0,options); 

fprintf('rapp=%dm\n c1app=%dm/s\n c2app=%dm/s\n rho1app=%dkg/m3\n rho2app=%dkg/m3\n Dapp=%dm\n dtapp=%ds\n',x(1),x(2),x(3),x(4),x(5),x(6),x(7))

%%% plot %%%
figure
hold on 
for i=1:4
    plot(AMP(i,:).*T(i,:),freq_1,'bo')
end
xlim([0.2 0.8])
ylim([0,fs/2])
vg=pek_vgb(freq,1,4,x(2),x(3),x(4),x(5),x(6)); 
plot(x(1)./vg-x(7), freq,'r')
legend('tnapp','','','','approx. disp. curves')
%%% end plot %%%


%% Detailed filtering function 
function mode_t_app=filtering(s_t,time,fs,NFFT,nbmode)
    %list to contain all the extracted modal components
    mode_t_app=[]; 
    %cut the signal so keep only the significative part
    ind1=1; 
    ind2=length(s_t);
    m=max(abs(s_t));
    while s_t(ind1)<0.01*m
        ind1=ind1+1; 
    end
    while s_t(ind2)<0.01*m
        ind2=ind2-1; 
    end
    %copy of the received signal
    str=s_t; 
    for nb=1:nbmode
        %list with all the quality factors
        Q=[];
        %list of positions in time to test t0
        L=80:130;
        %test to find the best t0
        for i=1:length(L)
            ind0=L(i); 
            %signal cut after t0
            stbb=str(ind0:ind2);
            %warping associated to t0
            [s_w, ~]=warp_temp_exa(stbb,fs,6.66+time(ind0),1);
            %warped spectrogram using a small value of sigma
            spectro_w=10*log10(abs(tfrstft(s_w,1:length(s_w),NFFT,gausswin(501))).^2);
            [Qt0,~]=separation_warp(spectro_w(1:400,:));
            Q=[Q,Qt0];
        end
        %selection of the best t0 maximising the quality factor
        [~,temp]=max(Q); 
        ind0=L(temp); 
        %warping of the signal using this t0
        stbb=str(ind0:ind2);
        N_ok=length(stbb); 
        [s_w, fs_w]=warp_temp_exa(stbb,fs,6.66+time(ind0),1);
        %computation of the spectrogram using a small value of sigma
        wind=gausswin(501);
        wind=wind/norm(wind);
        tfr_w=tfrstft(s_w,1:length(s_w),NFFT,wind); 
        spectro_w=10*log10(abs(tfr_w).^2);
        %creation of the mask (see details below)
        [~,masquep]=separation_warp(spectro_w(1:400,:));
        %completion with zeros
        masque=[masquep;zeros(NFFT-400,length(s_w))];
        %masked spectrogram
        mode_rtf_warp=masque.*tfr_w;
        %inverse spectrogram
        [mode_temp_warp]=real(sum(mode_rtf_warp,1))/NFFT/max(wind)*2;
        %inverse warping
        stib=iwarp_temp_exa(mode_temp_warp,fs_w,6.66+time(ind0),1,fs,N_ok);
        %completion with zeros
        stiapp=[zeros(ind0-1,1);stib;zeros(length(s_t)-ind2,1)]; 
        %add to mode_t_app the new mode
        mode_t_app=[mode_t_app,stiapp]; 
        %remove it from the signal 
        str=str-stiapp; 
        %%%%%%%%%%%%
        %%% plot %%% (comment to avoid the plot)
        %%%%%%%%%%%%
        figure 
        sgtitle(sprintf('Extraction of mode %d', nbmode+1-nb))
        subplot 131
        %first plot: warped spectrogram and bassins
        spectro=smooth2a(spectro_w(1:400,:),10,4);
        I=(spectro-max(max(spectro)))/max(max(-spectro))+1;
        I=I.*(I>=0.7); 
        WS=watershed(1-I); 
        N=double(max(max(WS)));
        Ymax=0*(1:N); 
        Xmax=0*(1:N); 
        for i=1:N
            S=I.*(WS==i); 
            [~,b]=max(S,[],'all');
            [i1,i2]= ind2sub(size(S),b); 
            Ymax(i)=i1; 
            Xmax(i)=i2; 
        end
        [Ymax,ind]=sort(Ymax,'descend');
        Xmax=Xmax(ind); 
        time_w=0:1/fs_w:(length(s_w)-1)/fs_w;
        freq_w=0:fs_w/NFFT:fs_w-fs_w/NFFT; 
        ylimM=min(freq_w(Ymax(1))+10,freq_w(400)); 
        xlimM=min(time_w(max(Xmax))+0.6,max(time_w)); 
        imagesc(time_w,freq_w(1:400),spectro.*(WS>=1)+max(max(spectro)).*(WS==0))
        hold on 
        plot(time_w(Xmax),freq_w(Ymax),'r.','MarkerSize',14)
        axis xy 
        ylim([0,ylimM])
        xlim([0,xlimM])
        xlabel('Times (s)')
        ylabel('Frequency (Hz)')
        title('Warped spectrogram and bassins')
        %second plot: selected bassins
        subplot 132
        imagesc(time_w,freq_w(1:400),spectro.*masquep)
        axis xy 
        ylim([0,ylimM])
        xlim([0,xlimM])
        xlabel('Times (s)')
        ylabel('Frequency (Hz)')
        title('Masked warped spectrogram')
        %third plot: spectrogram of the modal component 
        subplot 133
        spectro=abs(tfrstft(stiapp.',1:length(time),NFFT,gausswin(51))).^2;
        freq=(0:NFFT-1)*fs/NFFT;
        imagesc(time, freq, spectro)
        axis xy
        ylim([0 fs/2])
        xlim_plots=[0,1];
        xlim(xlim_plots)
        xlabel('Times (s)')
        ylabel('Frequency (Hz)')
        title('Unwarped spectrogram')
        %%%%%%%%%%%%
        %%% end plot %%% 
        %%%%%%%%%%%%
    end
    mode_t_app=mode_t_app(:,nbmode:-1:1);
end

function [Q,Mask]=separation_warp(spectro)
    %smooth the spectrogram to find the drainage bassins
    spectro=smooth2a(spectro,10,4);
    %convert the spectrogram into a black and white picture
    I=(spectro-max(max(spectro)))/max(max(-spectro))+1;
    %remove near zero parts
    I=I.*(I>=0.7); 
    %do a watershed transform
    WS=watershed(1-I); 
    %number of drainage bassins
    N=double(max(max(WS)));
    %list of local max
    Lmax=0*(1:N); 
    %list of their positions
    Ymax=0*(1:N); 
    Xmax=0*(1:N); 
    %completion of the three lists
    for i=1:N
        S=I.*(WS==i); 
        [a,b]=max(S,[],'all');
        Lmax(i)=a; 
        [i1,i2]= ind2sub(size(S),b); 
        Ymax(i)=i1; 
        Xmax(i)=i2; 
    end
    %sort bassins by descengin frequencies 
    [Ymax,ind]=sort(Ymax,'descend');
    Xmax=Xmax(ind); 
    Lmax=Lmax(ind);
    %computation of the mask
    i=2;
    Mask=spectro*0; 
    Mask=Mask+(WS==ind(1)); 
    %add the following bassin if their loc max is smaller
    while Ymax(i-1)-Ymax(i)<7 && i<15 && i<length(Ymax)
        Mask=Mask+(WS==ind(i)); 
        i=i+1;
    end 
    %computation of the quality factor Q
    if i>14
        Q=0;
    else 
        Q=abs(Ymax(i)-Ymax(1))+max(sum(Mask.'))/80; 
    end
end


function [freq,tm]=meth_max(spectro,NFFT,time,fs)
    %set of computed frequencies 
    freq=(0:NFFT-1)*fs/NFFT;
    %list of associated max
    E=spectro(:,1)*0; 
    %list of the position of the local max
    tm=E*0; 
    for i=1:length(E)
        [e,a]=max(spectro(i,:)); 
        E(i)=e; 
        tm(i)=time(a); 
    end
    %we cut the symmetric par in freq and tm 
    freq=freq(1:NFFT/2-1); 
    tm=tm(1:NFFT/2-1); 
end

function x=J(r,c1,c2,rho1,rho2,D,dt,freq,T,AMP) 
    %theoretical dispersion curves
    temp=(r./pek_vgb(freq,1,4,c1,c2,rho1,rho2,D)); 
    x=0; 
    %remove all points with Nan values 
    temp(isnan(temp))=0; 
    for i=1:4
        x=x+norm(rmmissing(AMP(i,:).*(T(i,:)+dt-temp(i,:)))).^2; 
    end
end
